// Generated by Apple Swift version 2.2 (swiftlang-703.0.18.8 clang-703.0.31)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import Foundation.NSURLSession;
@import UIKit;
@import ObjectiveC;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

@interface NSURLSessionConfiguration (SWIFT_EXTENSION(TappxFramework))
@end

@class NSBundle;
@class NSCoder;

SWIFT_CLASS("_TtC14TappxFramework25TappxBannerViewController")
@interface TappxBannerViewController : UIViewController
- (void)loadView;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)didReceiveMemoryWarning;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSString *, id> * _Nullable)change context:(void * _Null_unspecified)context;
- (NSString * _Nonnull)html;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface TappxBannerViewController (SWIFT_EXTENSION(TappxFramework))
@end

@class UIWebView;
@class NSURLRequest;
@class NSError;

@interface TappxBannerViewController (SWIFT_EXTENSION(TappxFramework)) <UIWebViewDelegate>
- (BOOL)webView:(UIWebView * _Nonnull)webView shouldStartLoadWith:(NSURLRequest * _Nonnull)request navigationType:(UIWebViewNavigationType)navigationType;
- (void)webViewDidFinishLoad:(UIWebView * _Nonnull)webView;
- (void)webView:(UIWebView * _Nonnull)webView didFailLoadWithError:(NSError * _Nullable)error;
- (void)close;
- (void)resize;
@end


SWIFT_PROTOCOL("_TtP14TappxFramework33TappxBannerViewControllerProtocol_")
@protocol TappxBannerViewControllerProtocol
- (void)tappxBannerViewControllerDidFinishLoadWithViewController:(TappxBannerViewController * _Nonnull)vc;
- (void)tappxBannerViewControllerDidPressWithViewController:(TappxBannerViewController * _Nonnull)vc;
@optional
- (void)tappxBannerViewControllerDidFailWithViewController:(TappxBannerViewController * _Nonnull)vc error:(NSError * _Nonnull)error;
- (void)tappxBannerViewControllerDidCloseWithViewController:(TappxBannerViewController * _Nonnull)vc;
- (void)tappxBannerViewControllerDidCollapseWithViewController:(TappxBannerViewController * _Nonnull)vc;
- (void)tappxBannerViewControllerDidExpanseWithViewController:(TappxBannerViewController * _Nonnull)vc;
@end


SWIFT_CLASS("_TtC14TappxFramework14TappxFramework")
@interface TappxFramework : NSObject
+ (TappxFramework * _Nonnull)sharedInstance;
@property (nonatomic, copy) NSString * _Nonnull sdkType;
@property (nonatomic, copy) NSString * _Nonnull mediator;
@end


@interface TappxFramework (SWIFT_EXTENSION(TappxFramework))
@end


@interface TappxFramework (SWIFT_EXTENSION(TappxFramework))
@end


@interface TappxFramework (SWIFT_EXTENSION(TappxFramework))
@end


@interface TappxFramework (SWIFT_EXTENSION(TappxFramework))
@end

@protocol UIViewControllerTransitionCoordinator;

SWIFT_CLASS("_TtC14TappxFramework31TappxInterstitialViewController")
@interface TappxInterstitialViewController : UIViewController
- (void)loadView;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)didReceiveMemoryWarning;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSString *, id> * _Nullable)change context:(void * _Null_unspecified)context;
- (NSString * _Nonnull)html;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface TappxInterstitialViewController (SWIFT_EXTENSION(TappxFramework))
@end


@interface TappxInterstitialViewController (SWIFT_EXTENSION(TappxFramework)) <UIWebViewDelegate>
- (BOOL)webView:(UIWebView * _Nonnull)webView shouldStartLoadWith:(NSURLRequest * _Nonnull)request navigationType:(UIWebViewNavigationType)navigationType;
- (void)webViewDidFinishLoad:(UIWebView * _Nonnull)webView;
- (void)webView:(UIWebView * _Nonnull)webView didFailLoadWithError:(NSError * _Nullable)error;
- (void)close;
- (void)resize;
@end


SWIFT_PROTOCOL("_TtP14TappxFramework39TappxInterstitialViewControllerProtocol_")
@protocol TappxInterstitialViewControllerProtocol
- (void)tappxInterstitialViewControllerDidFinishLoadWithViewController:(TappxInterstitialViewController * _Nonnull)vc;
- (void)tappxInterstitialViewControllerDidPressWithViewController:(TappxInterstitialViewController * _Nonnull)vc;
- (void)tappxInterstitialViewControllerDidCloseWithViewController:(TappxInterstitialViewController * _Nonnull)vc;
@optional
- (void)tappxInterstitialViewControllerDidFailWithViewController:(TappxInterstitialViewController * _Nonnull)vc error:(NSError * _Nonnull)error;
@required
- (void)tappxInterstitialViewControllerDidAppearWithViewController:(TappxInterstitialViewController * _Nonnull)vc;
@end


@interface UIGestureRecognizer (SWIFT_EXTENSION(TappxFramework))

/// Convenience initializer, associating an action closure with the gesture recognizer (instead of the more traditional target/action).
///
/// \param action The closure for the recognizer to execute. There is no pre-logic to conditionally invoke the closure or not (e.g. only invoke the closure if the gesture recognizer is in a particular state). The closure is merely invoked directly; all handler logic is up to the closure.
///
/// \returns  The UIGestureRecognizer.
- (nonnull instancetype)initWithAction:(void (^ _Nonnull)(UIGestureRecognizer * _Nonnull))action;
@end


@interface UIView (SWIFT_EXTENSION(TappxFramework))
@end

#pragma clang diagnostic pop
